{"version":3,"sources":["board.svg","black-piece.svg","white-piece.svg","Board.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PieceType","Object","freeze","EMPTY","BLACK","WHITE","Piece","_this$props","this","props","type","x","y","ghost","react_default","a","createElement","alt","src","black","white","style","position","left","top","userSelect","opacity","draggable","width","height","React","PureComponent","Board","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleMouseDown","e","Math","round","max","pageX","currentTarget","offsetLeft","pageY","offsetTop","placePieceAt","handleMouseMove","setState","hoverX","hoverY","location","state","pieces","_ref","pieceToMove","newPieces","slice","length","push","_this$state","styles","container","onMouseDown","board","onMouseMove","map","i","Board_Piece","key","floor","display","alignItems","justifyContent","App","className","Board_Board","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76c9cfac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/board.a7ebdc24.svg\";","module.exports = __webpack_public_path__ + \"static/media/black-piece.029d504d.svg\";","module.exports = __webpack_public_path__ + \"static/media/white-piece.513de868.svg\";","import React from \"react\";\r\nimport board from \"./board.svg\";\r\nimport black from \"./black-piece.svg\";\r\nimport white from \"./white-piece.svg\";\r\n\r\nconst PieceType = Object.freeze({\r\n  EMPTY: 0,\r\n  BLACK: 1,\r\n  WHITE: 2\r\n});\r\n\r\nclass Piece extends React.PureComponent {\r\n  render() {\r\n    const { type, x, y, ghost } = this.props;\r\n    if (type === PieceType.EMPTY) return null;\r\n\r\n    return (\r\n      <img\r\n        alt=\"piece\"\r\n        src={PieceType.BLACK === type ? black : white}\r\n        style={{\r\n          position: \"absolute\",\r\n          left: 8 + x * 46.15,\r\n          top: 8 + y * 46.15,\r\n          userSelect: \"none\",\r\n          opacity: ghost ? 0.75 : 1\r\n        }}\r\n        draggable={false}\r\n        width={40}\r\n        height={40}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default class Board extends React.PureComponent {\r\n  static styles = {\r\n    container: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\"\r\n    }\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const pieces = [];\r\n    while (pieces.length < 15 * 15) pieces.push(PieceType.EMPTY);\r\n    this.state = {\r\n      pieces,\r\n      pieceToMove: PieceType.BLACK,\r\n      hoverX: 54.15,\r\n      hoverY: 54.15\r\n    };\r\n  }\r\n\r\n  handleMouseDown = e => {\r\n    const x = Math.round(\r\n      Math.max(0, (e.pageX - e.currentTarget.offsetLeft - 27) / 46.15)\r\n    );\r\n    const y = Math.round(\r\n      Math.max(0, (e.pageY - e.currentTarget.offsetTop - 27) / 46.15)\r\n    );\r\n    this.placePieceAt(x, y);\r\n  };\r\n\r\n  handleMouseMove = e => {\r\n    const x = Math.round(\r\n      Math.max(0, (e.pageX - e.currentTarget.x - 27) / 46.15)\r\n    );\r\n    const y = Math.round(\r\n      Math.max(0, (e.pageY - e.currentTarget.y - 27) / 46.15)\r\n    );\r\n    this.setState({ hoverX: x, hoverY: y });\r\n  };\r\n\r\n  placePieceAt = (x, y) => {\r\n    const location = x + y * 15;\r\n    if (this.state.pieces[location] !== PieceType.EMPTY) return;\r\n\r\n    this.setState(({ pieces, pieceToMove }) => {\r\n      const newPieces = pieces.slice();\r\n      newPieces[location] = pieceToMove;\r\n      return {\r\n        pieces: newPieces,\r\n        pieceToMove:\r\n          PieceType.BLACK === pieceToMove ? PieceType.WHITE : PieceType.BLACK\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { pieceToMove, hoverX, hoverY, pieces } = this.state;\r\n    return (\r\n      <div style={Board.styles.container}>\r\n        <div\r\n          style={{ position: \"relative\" }}\r\n          onMouseDown={this.handleMouseDown}\r\n        >\r\n          <img\r\n            src={board}\r\n            alt=\"board\"\r\n            width={700}\r\n            height={700}\r\n            style={{ userSelect: \"none\" }}\r\n            draggable={false}\r\n            onMouseMove={this.handleMouseMove}\r\n          />\r\n          {pieces.map((p, i) => {\r\n            return <Piece key={i} type={p} x={i % 15} y={Math.floor(i / 15)} />;\r\n          })}\r\n          {pieces[hoverX + hoverY * 15] === PieceType.EMPTY && (\r\n            <Piece ghost type={pieceToMove} x={hoverX} y={hoverY} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Board from \"./Board\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">Gomoku</header>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}